kenneth_pham@cloudshell:~ (multi-k8s-221804)$ helm install stable/nginx-ingress --name my-nginx --set rbac.create=true
NAME:   my-nginx
LAST DEPLOYED: Wed Nov  7 20:49:02 2018
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
==> v1/ConfigMap
NAME                               AGE
my-nginx-nginx-ingress-controller  0s

==> v1beta1/Role
my-nginx-nginx-ingress  0s

==> v1beta1/RoleBinding
my-nginx-nginx-ingress  0s

==> v1beta1/Deployment
my-nginx-nginx-ingress-controller       0s
my-nginx-nginx-ingress-default-backend  0s

==> v1/Pod(related)

NAME                                                     READY  STATUS             RESTARTS  AGE
my-nginx-nginx-ingress-controller-6c4c5cfc65-k2w87       0/1    ContainerCreating  0         0s
my-nginx-nginx-ingress-default-backend-7799dcdf8f-7rb2f  0/1    ContainerCreating  0         0s

==> v1/ServiceAccount

NAME                    AGE
my-nginx-nginx-ingress  0s

==> v1beta1/ClusterRole
my-nginx-nginx-ingress  0s

==> v1beta1/ClusterRoleBinding
my-nginx-nginx-ingress  0s

==> v1/Service
my-nginx-nginx-ingress-controller       0s
my-nginx-nginx-ingress-default-backend  0s


NOTES:
The nginx-ingress controller has been installed.
It may take a few minutes for the LoadBalancer IP to be available.
You can watch the status by running 'kubectl --namespace default get services -o wide -w my-nginx-nginx-ingress-controller'

An example Ingress that makes use of the controller:

  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    annotations:
      kubernetes.io/ingress.class: nginx
    name: example
    namespace: foo
  spec:
    rules:
      - host: www.example.com
        http:
          paths:
            - backend:
                serviceName: exampleService
                servicePort: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
        - hosts:
            - www.example.com
          secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls